services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      api:
        condition: service_healthy
    networks:
      - frontend-network
    entrypoint: ["sh", "/app/start.sh"]

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./api:/api
    depends_on:
      db:
        condition: service_healthy
    entrypoint: ["bash", "/api/scripts/start.sh"]
    healthcheck:
      test: curl -f http://localhost:8080 || exit 1
      interval: 5s
      retries: 5
      timeout: 1s
    environment:
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASSWORD=di_pocket_watcher
      - DB_NAME=di_pocket_watcher
      - DB_PORT=5432
      - GOOSE_DRIVER=postgres
      - GOOSE_DBSTRING=host=db user=postgres password=di_pocket_watcher dbname=di_pocket_watcher port=5432 sslmode=disable
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - frontend-network
      - backend-network

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=di_pocket_watcher
      - POSTGRES_DB=di_pocket_watcher
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:

networks:
  frontend-network:
  backend-network: