// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, token
) VALUES (
  $1, $2
)
RETURNING id, email, token
`

type CreateUserParams struct {
	Email string `json:"email"`
	Token string `json:"token"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Token)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Token)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email FROM users
WHERE id = $1 LIMIT 1
`

type GetUserRow struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email FROM users
WHERE email = $1 LIMIT 1
`

type GetUserByEmailRow struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const getUserToken = `-- name: GetUserToken :one
SELECT id, token FROM users
WHERE id = $1 LIMIT 1
`

type GetUserTokenRow struct {
	ID    int64  `json:"id"`
	Token string `json:"token"`
}

func (q *Queries) GetUserToken(ctx context.Context, id int64) (GetUserTokenRow, error) {
	row := q.db.QueryRow(ctx, getUserToken, id)
	var i GetUserTokenRow
	err := row.Scan(&i.ID, &i.Token)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email FROM users
ORDER BY id
`

type ListUsersRow struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(&i.ID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set email = $2
WHERE id = $1
`

type UpdateUserParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Email)
	return err
}
